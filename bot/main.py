import os
import telebot
from yt_dlp import YoutubeDL
import subprocess
import re
import time

from bot import config  # ‚Üê –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ config
from bot import downloads_manager  # ‚Üê –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ downloads_manager
from bot.video_sender import send_video_to_user  # ‚Üê —É–∫–∞–∑–∞–ª–∏ –ø—É—Ç—å —á–µ—Ä–µ–∑ bot

from yt_dlp.utils import DownloadError


bot = telebot.TeleBot(config.TELEGRAM_BOT_TOKEN)

if not os.path.exists(config.DOWNLOAD_DIR):
    os.makedirs(config.DOWNLOAD_DIR)


def sanitize_filename(filename):
    """
    –£–¥–∞–ª—è–µ—Ç –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã.
    """
    return re.sub(r'[:"*?<>|/\\]', '', filename).strip()


def sanitize_filepath(filepath):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç sanitize_filename –∫–æ –≤—Å–µ–π —á–∞—Å—Ç–∏ –ø—É—Ç–∏.
    """
    directory, filename = os.path.split(filepath)
    sanitized_filename = sanitize_filename(filename)
    return os.path.join(directory, sanitized_filename)


def notify_admin(user_id, username, message_text):

    bot.send_message(
        config.ADMIN_ID,
        f"üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"ID: {user_id}\n"
        f"–ò–º—è: {username}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}"
    )


def is_subscribed(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª.
    """
    try:
        chat_member = bot.get_chat_member(config.CHANNEL_USERNAME, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


def process_video(video_path):
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—É—Ç—å –±–µ–∑–æ–ø–∞—Å–µ–Ω
        video_path = sanitize_filepath(video_path)
        fixed_video_path = sanitize_filepath(
            os.path.splitext(video_path)[0] + "_fixed.mp4"
        )

        # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç: H.264 + AAC
        ffmpeg_command = [
            "ffmpeg", "-i", video_path,
            "-c:v", "libx264",             # –í–∏–¥–µ–æ –∫–æ–¥–µ–∫
            "-preset", "fast",             # –°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            "-crf", "23",                  # –ö–∞—á–µ—Å—Ç–≤–æ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
            "-c:a", "aac",                 # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫
            "-b:a", "128k",                # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
            "-movflags", "faststart",      # –î–ª—è Telegram –∏ –≤–µ–±
            fixed_video_path
        ]
        subprocess.run(ffmpeg_command, check=True)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤–∏–¥–µ–æ
        ffmpeg_command = [
            "ffmpeg", "-i", fixed_video_path
        ]
        result = subprocess.run(
            ffmpeg_command,
            stderr=subprocess.PIPE,
            text=True
        )
        ffmpeg_output = result.stderr

        resolution_match = re.search(r'Video:.* (\d+)x(\d+)', ffmpeg_output)
        if resolution_match:
            width = int(resolution_match.group(1))
            height = int(resolution_match.group(2))
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ.")

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        if os.path.exists(video_path):
            os.remove(video_path)
            print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ {video_path} —É–¥–∞–ª–µ–Ω–æ.")
        else:
            print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ {video_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

        return fixed_video_path, width, height

    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ FFmpeg: {e}")


@bot.message_handler(commands=['youtube_blocked_test'])
def youtube_blocked_test(message):
    if message.from_user.id != config.ADMIN_ID:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        download_dir = os.path.join(os.path.dirname(__file__), 'downloads')
        os.makedirs(download_dir, exist_ok=True)
        output_template = os.path.join(download_dir, '%(title)s.%(ext)s')

        ytdlp_command = [
            "yt-dlp",
            "--proxy", "socks5://127.0.0.1:9050",
            "--cookies", "web_auth_storage.txt",
            "-f", "(bv*+ba/b)[height<=720]",
            "-o", output_template,
            "https://www.youtube.com/watch?v=QnaS8T4MdrI"
        ]

        # –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_message = bot.send_message(message.chat.id, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...")

        # –ó–∞–ø—É—Å–∫ yt-dlp
        process = subprocess.Popen(
            ytdlp_command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1
        )

        last_edit_time = 0
        for line in process.stdout:
            if not line.strip():
                continue

            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_match = re.search(r'(\d{1,3}\.\d+)%', line)
            if progress_match:
                percent = float(progress_match.group(1))
                blocks = int(percent / 10)
                bar = "‚ñì" * blocks + "‚ñë" * (10 - blocks)
                now = time.time()
                if now - last_edit_time > 1:  # –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É
                    bot.edit_message_text(
                        f"üì• –ü—Ä–æ–≥—Ä–µ—Å—Å: `{bar} {percent:.1f}%`",
                        chat_id=message.chat.id,
                        message_id=status_message.message_id,
                        parse_mode="Markdown"
                    )
                    last_edit_time = now

        process.wait()

        if process.returncode != 0:
            bot.edit_message_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.", chat_id=message.chat.id, message_id=status_message.message_id)
            return

        # –ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        downloaded_files = [f for f in os.listdir(download_dir) if f.endswith(('.mp4', '.mkv'))]
        if not downloaded_files:
            bot.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ.", chat_id=message.chat.id, message_id=status_message.message_id)
            return

        video_path = os.path.join(download_dir, downloaded_files[0])
        fixed_video_path, width, height = process_video(video_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        send_video_to_user(
            bot=bot,
            chat_id=message.chat.id,
            user_id=message.from_user.id,
            username=message.from_user.username,
            url="https://www.youtube.com/watch?v=QnaS8T4MdrI",
            video_path=fixed_video_path,
            width=width,
            height=height,
            admin_id=config.ADMIN_ID
        )

        # –£–¥–∞–ª–µ–Ω–∏–µ
        if os.path.exists(fixed_video_path):
            os.remove(fixed_video_path)

    except Exception as e:
        bot.send_message(message.chat.id, f"üö´ –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['instagram_test'])
def instagram_test(message):
    if message.from_user.id != config.ADMIN_ID:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π –∏ –∫–æ–º–∞–Ω–¥—ã
        download_dir = os.path.join(os.path.dirname(__file__), 'downloads')
        os.makedirs(download_dir, exist_ok=True)
        output_template = os.path.join(download_dir, '%(title)s.%(ext)s')

        ytdlp_command = [
            "yt-dlp",
            "--proxy", "socks5://127.0.0.1:9050",
            "--cookies", "web_auth_storage.txt",
            "-f", "mp4",
            "-o", output_template,
            "https://www.instagram.com/reel/DFk0NvTuX4S/?igsh=MWZ1MTFhOWExMGV5bQ=="
        ]

        # –ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_message = bot.send_message(message.chat.id, "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Instagram-–≤–∏–¥–µ–æ...")

        # –ó–∞–ø—É—Å–∫ yt-dlp —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        process = subprocess.Popen(
            ytdlp_command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1
        )

        last_edit_time = 0
        for line in process.stdout:
            if not line.strip():
                continue

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_match = re.search(r'(\d{1,3}\.\d+)%', line)
            if progress_match:
                percent = float(progress_match.group(1))
                blocks = int(percent / 10)
                bar = "‚ñì" * blocks + "‚ñë" * (10 - blocks)
                now = time.time()
                if now - last_edit_time > 1:
                    bot.edit_message_text(
                        f"üì• –ü—Ä–æ–≥—Ä–µ—Å—Å: `{bar} {percent:.1f}%`",
                        chat_id=message.chat.id,
                        message_id=status_message.message_id,
                        parse_mode="Markdown"
                    )
                    last_edit_time = now

        process.wait()

        if process.returncode != 0:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ.", chat_id=message.chat.id, message_id=status_message.message_id)
            return

        # –ü–æ–∏—Å–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        downloaded_files = [f for f in os.listdir(download_dir) if f.endswith(('.mp4', '.mkv'))]
        if not downloaded_files:
            bot.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ.", chat_id=message.chat.id, message_id=status_message.message_id)
            return

        video_path = os.path.join(download_dir, downloaded_files[0])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        fixed_video_path, width, height = process_video(video_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_video_to_user(
            bot=bot,
            chat_id=message.chat.id,
            user_id=message.from_user.id,
            username=message.from_user.username,
            url="https://www.instagram.com/reel/DFk0NvTuX4S/?igsh=MWZ1MTFhOWExMGV5bQ==",
            video_path=fixed_video_path,
            width=width,
            height=height,
            admin_id=config.ADMIN_ID
        )

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists(fixed_video_path):
            os.remove(fixed_video_path)

    except Exception as e:
        bot.send_message(message.chat.id, f"üö´ –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    notify_admin(
        message.from_user.id,
        message.from_user.username,
        message.text
    )

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    try:
        with open("margarine_intro.mp4", "rb") as video:
            bot.send_video(
                message.chat.id,
                video,
                caption=(
                    "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, "
                    "–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
                )
            )
    except Exception as e:
        bot.send_message(
            config.ADMIN_ID,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} "
            f"(ID: {message.from_user.id})\n"
            f"–û—à–∏–±–∫–∞: {e}"
        )


@bot.message_handler(commands=['show_downloads'])
def show_downloads(message):
    if message.from_user.id == config.ADMIN_ID:
        try:
            files = downloads_manager.list_downloads(config.DOWNLOAD_DIR)
            if files:
                bot.send_message(
                    message.chat.id,
                    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ downloads:\n" + "\n".join(files)
                )
            else:
                bot.send_message(message.chat.id, "–ü–∞–ø–∫–∞ downloads –ø—É—Å—Ç–∞.")
        except Exception as e:
            bot.send_message(
                message.chat.id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏: {e}"
            )
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@bot.message_handler(commands=['clean_downloads'])
def clean_downloads(message):
    if message.from_user.id == config.ADMIN_ID:
        try:
            downloads_manager.clean_downloads(config.DOWNLOAD_DIR)
            bot.send_message(message.chat.id, "–ü–∞–ø–∫–∞ downloads –æ—á–∏—â–µ–Ω–∞.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–∫–∏: {e}")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


def get_format_str(url):
    if 'instagram.com' in url or 'vimeo.com' in url:
        return 'b'
    elif 'youtube.com/shorts/' in url:
        # Shorts ‚Äî —Ç–æ–ª—å–∫–æ fallback –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        return 'bv*+ba/b/best'
    else:
        return (
            "bestvideo[height=480]+bestaudio/best[height=480]/"
            "bestvideo[height=720]+bestaudio/best[height=720]/"
            "bestvideo[height=360]+bestaudio/best[height=360]/"
            "bv*+ba/b/best"
        )


def download_with_options(url, use_tor=False):
    ydl_opts = {
        'format': get_format_str(url),
        'outtmpl': f'{config.DOWNLOAD_DIR}/%(title)s.%(ext)s',
        'quiet': True,
        'no_warnings': True,
        'merge_output_format': 'mp4',
        'force_keyframes_at_cuts': True,
        'overwrites': True,
        'noplaylist': True,
        'no_sabr': True,
        'restrictfilenames': True,
        'geo_bypass': True,
        'retries': 5,
        'fragment_retries': 5,
        'continuedl': True,
    }

    if use_tor:
        ydl_opts['proxy'] = 'socks5://127.0.0.1:9050'
        ydl_opts['cookiefile'] = '/root/Margarine6_bot/web_auth_storage.txt'

    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        video_path = sanitize_filepath(ydl.prepare_filename(info))
        return process_video(video_path)


def download_video_file(url):
    try:
        return download_with_options(url)
    except Exception as e:
        print(f"[BOT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        try:
            return download_with_options(url, use_tor=True)
        except Exception as e2:
            raise RuntimeError(f"[BOT] –û—à–∏–±–∫–∞ –¥–∞–∂–µ —á–µ—Ä–µ–∑ Tor: {e2}")


@bot.message_handler(content_types=['text'])
def handle_download_request(message):
    if not is_subscribed(message.from_user.id):
        bot.reply_to(
            message,
            "–ë–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ "
            "–º–æ–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞: "
            "[–ü–µ—Ä–µ–¥–∞—Ç—á–∏–∫ –í–æ–≤–∞–Ω–∞](https://t.me/+AM5qac1gwTUwMGNi)",
            parse_mode='Markdown'
        )
        return

    notify_admin(
        message.from_user.id,
        message.from_user.username,
        message.text
    )
    url = message.text
    bot.reply_to(message, "–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...")

    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video_path, width, height = download_video_file(url)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        send_video_to_user(
            bot,
            message.chat.id,
            message.from_user.id,
            message.from_user.username,
            url,
            video_path,
            width,
            height,
            config.ADMIN_ID  # –ü–µ—Ä–µ–¥–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        )

    except RuntimeError as e:
        bot.reply_to(message, str(e))


def main():
    # –∑–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–≤–æ–π –±–æ—Ç
    bot.polling()  # –∏–ª–∏ executor.start_polling(...) ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

if __name__ == "__main__":
    main()
